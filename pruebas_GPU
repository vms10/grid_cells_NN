{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"pruebas_GPU","provenance":[{"file_id":"10QmGanToOR24yW36C3DtCp319eZR76Hz","timestamp":1618309944046},{"file_id":"/v2/external/notebooks/gpu.ipynb","timestamp":1617912284476}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"tMce8muBqXQP"},"source":["# Tensorflow with GPU\n","\n","This notebook provides an introduction to computing on a [GPU](https://cloud.google.com/gpu) in Colab. In this notebook you will connect to a GPU, and then run some basic TensorFlow operations on both the CPU and a GPU, observing the speedup provided by using the GPU.\n"]},{"cell_type":"markdown","metadata":{"id":"oM_8ELnJq_wd"},"source":["## Enabling and testing the GPU\n","\n","First, you'll need to enable GPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select GPU from the Hardware Accelerator drop-down\n","\n","Next, we'll confirm that we can connect to the GPU with tensorflow:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sXnDmXR7RDr2","executionInfo":{"status":"ok","timestamp":1618569367530,"user_tz":180,"elapsed":7661,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"100864da-a4f9-4eef-9ec1-dadb6288b147"},"source":["%tensorflow_version 2.x\n","import tensorflow as tf\n","device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  raise SystemError('GPU device not found')\n","print('Found GPU at: {}'.format(device_name))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found GPU at: /device:GPU:0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"v3fE7KmKRDsH"},"source":["## Observe TensorFlow speedup on GPU relative to CPU\n","\n","This example constructs a typical convolutional neural network layer over a\n","random image and manually places the resulting ops on either the CPU or the GPU\n","to compare execution speed."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uzgv2G1OWXnI","executionInfo":{"status":"ok","timestamp":1618571042528,"user_tz":180,"elapsed":685,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"1ff51a89-0b4f-4849-906d-1cca4ba61224"},"source":["tf.nn.conv2d(tf.reshape(a, (1, 40, 40, 1)), tf.reshape(a, (40, 40, 1, 1)), strides=[1, 1], padding=[[0, 0], [39,39], [39, 39], [0, 0]])[0, ..., 0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(79, 79), dtype=float32, numpy=\n","array([[0.25617933, 0.43107653, 0.2799301 , ..., 0.77206707, 0.07899714,\n","        0.3945005 ],\n","       [0.7236941 , 1.3706274 , 1.2156868 , ..., 1.3300948 , 0.6330085 ,\n","        0.7696929 ],\n","       [1.0588069 , 2.6186943 , 2.5536842 , ..., 2.0364575 , 1.2283778 ,\n","        1.1540675 ],\n","       ...,\n","       [1.1540543 , 1.2283776 , 2.036459  , ..., 2.5536742 , 2.6186864 ,\n","        1.0588144 ],\n","       [0.7696804 , 0.63300776, 1.3300943 , ..., 1.2156782 , 1.370619  ,\n","        0.72370183],\n","       [0.3944881 , 0.07899714, 0.772069  , ..., 0.27991962, 0.43106985,\n","        0.2561884 ]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y04m-jvKRDsJ","executionInfo":{"status":"ok","timestamp":1618569996547,"user_tz":180,"elapsed":1635,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"516dfde7-627c-4ca9-a174-537e095bfb0a"},"source":["%tensorflow_version 2.x\n","import tensorflow as tf\n","import timeit\n","import numpy as np\n","from scipy import signal\n","a=J=np.random.rand(40,40).astype(np.float32)\n","img_tf = tf.constant(tf.reshape(a, (1, 40, 40, 1)), dtype=tf.float32)\n","k_tf = tf.constant(tf.reshape(a, (40, 40, 1, 1)), dtype=tf.float32)\n","\n","device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  print(\n","      '\\n\\nThis error most likely means that this notebook is not '\n","      'configured to use a GPU.  Change this in Notebook Settings via the '\n","      'command palette (cmd/ctrl-shift-P) or the Edit menu.\\n\\n')\n","  raise SystemError('GPU device not found')\n","\n","def cpu():\n","  with tf.device('/cpu:0'):\n","    #return tf.nn.conv2d(img_tf, k_tf, strides=[1, 1], padding=[[0, 0], [39,39], [39, 39], [0, 0]])[0, ..., 0]\n","    return signal.fftconvolve(a, np.rot90(a, k=2))\n","    #return signal.correlate2d(a,a)\n","\n","def gpu():\n","  with tf.device('/device:GPU:0'):\n","    return tf.nn.conv2d(img_tf, k_tf, strides=[1, 1], padding=[[0, 0], [39,39], [39, 39], [0, 0]])[0, ..., 0]\n","  \n","# We run each op once to warm up; see: https://stackoverflow.com/a/45067900\n","cpu()\n","gpu()\n","\n","# Run the op several times.\n","print('Time (s) to convolve 32x7x7x3 filter over random 100x100x100x3 images '\n","      '(batch x height x width x channel). Sum of ten runs.')\n","print('CPU (s):')\n","cpu_time = timeit.timeit('cpu()', number=10, setup=\"from __main__ import cpu\")\n","print(cpu_time)\n","print('GPU (s):')\n","gpu_time = timeit.timeit('gpu()', number=10, setup=\"from __main__ import gpu\")\n","print(gpu_time)\n","print('GPU speedup over CPU: {}x'.format(int(cpu_time/gpu_time)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Time (s) to convolve 32x7x7x3 filter over random 100x100x100x3 images (batch x height x width x channel). Sum of ten runs.\n","CPU (s):\n","0.0035089539999262342\n","GPU (s):\n","0.004225507999990441\n","GPU speedup over CPU: 0x\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KDcTvmKZyt1N"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Acn1CimUV4rp","executionInfo":{"status":"ok","timestamp":1618570883692,"user_tz":180,"elapsed":733,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"21baea02-cea1-4fbf-8703-12dbbcd4aa12"},"source":["tf.ones(a.shape)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(40, 40), dtype=float32, numpy=\n","array([[1., 1., 1., ..., 1., 1., 1.],\n","       [1., 1., 1., ..., 1., 1., 1.],\n","       [1., 1., 1., ..., 1., 1., 1.],\n","       ...,\n","       [1., 1., 1., ..., 1., 1., 1.],\n","       [1., 1., 1., ..., 1., 1., 1.],\n","       [1., 1., 1., ..., 1., 1., 1.]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eOtEd9B-FqGH","executionInfo":{"status":"ok","timestamp":1617913259088,"user_tz":180,"elapsed":1062,"user":{"displayName":"Sol Vidal","photoUrl":"","userId":"10822241948323237248"}},"outputId":"1b0b229b-4847-44da-a890-0a75833e3169"},"source":["tf.debugging.set_log_device_placement(True)\n","a = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n","b = tf.constant([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\n","\n","\n","def cpu():\n","  with tf.device('/cpu:0'):\n","    return tf.matmul(a, b)\n","\n","def gpu():\n","  with tf.device('/device:GPU:0'):\n","    return tf.matmul(a, b)\n","\n","cpu()\n","gpu()\n","\n","# Run the op several times.\n","print('Time (s) to convolve 32x7x7x3 filter over random 100x100x100x3 images '\n","      '(batch x height x width x channel). Sum of ten runs.')\n","print('CPU (s):')\n","cpu_time = timeit.timeit('cpu()', number=10, setup=\"from __main__ import cpu\")\n","print(cpu_time)\n","print('GPU (s):')\n","gpu_time = timeit.timeit('gpu()', number=10, setup=\"from __main__ import gpu\")\n","print(gpu_time)\n","print('GPU speedup over CPU: {}x'.format(int(cpu_time/gpu_time)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Time (s) to convolve 32x7x7x3 filter over random 100x100x100x3 images (batch x height x width x channel). Sum of ten runs.\n","CPU (s):\n","0.0019681710000440944\n","GPU (s):\n","0.0013121719999844572\n","GPU speedup over CPU: 1x\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VfE7yFTNJaZ-","executionInfo":{"status":"ok","timestamp":1618412116391,"user_tz":180,"elapsed":3807,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"3913fbf3-ce33-444e-f7bf-59faf0280897"},"source":["import numpy as np\n","a = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n","b = np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\n","\n","\n","tf.matmul(a, b)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=float64, numpy=\n","array([[22., 28.],\n","       [49., 64.]])>"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yzodn7HF4R89","executionInfo":{"status":"ok","timestamp":1618412143447,"user_tz":180,"elapsed":693,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"d3a2207f-d1b1-4925-da4f-b2d7ff0afd8e"},"source":["np.dot(a,b)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[22., 28.],\n","       [49., 64.]])"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"nYuoaVHQLPit"},"source":["import numpy as np\n","import cupy as cp\n","def FFTConvolve(in1, in2):\n","\n","    if in1.ndim == in2.ndim == 0:  # scalar inputs\n","        return in1 * in2\n","    elif not in1.ndim == in2.ndim:\n","        raise ValueError(\"Dimensions do not match.\")\n","    elif in1.size == 0 or in2.size == 0:  # empty arrays\n","        return array([])\n","\n","    s1 = np.asarray(in1.shape)\n","    s2 = np.asarray(in2.shape)\n","\n","    shape = s1 + s2 - 1\n","\n","    fsize = 2 ** np.ceil(np.log2(shape)).astype(int) \n","    fslice = tuple([slice(0, int(sz)) for sz in shape])\n","\n","    ret = cp.fft.ifftn(cp.fft.fftn(in1, np.asarray(fsize)) * cp.fft.fftn(in2, np.asarray(fsize)))[fslice].copy()\n","    return ret"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0t9LiOi04SQ5"},"source":["FFTConvolve(myone, cp.rot90(myone, k=2))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cWOoBRDj4UTF"},"source":["import torch\n","from torch.nn.functional import conv2d"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DkDGL0zb4WlN"},"source":["torch.from_numpy(myone)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"csmEv_cm46bu"},"source":["conv2d(torch.from_numpy(myone), torch.from_numpy(myone), padding=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lukIADHw4-h0"},"source":["mapp=np.array([[1,2],[3,4]])\n","\n","myone=np.ones(mapp.shape)\n","nn=signal.fftconvolve(myone, np.rot90(myone, k=2))\n","#mx=signal.fftconvolve(mapp, np.rot90(myone, k=2))/nn\n","#my=signal.fftconvolve(myone, np.rot90(mapp, k=2))/nn\n","#auto=signal.fftconvolve(mapp, np.rot90(mapp, k=2))/nn-mx*my\n","#return auto/(np.sqrt((signal.fftconvolve(mapp**2, np.rot90(myone, k=2))/nn-mx*mx)*(signal.fftconvolve(myone, np.rot90(mapp**2, k=2))/nn-my*my)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ebhK3Rr15Cq6"},"source":["import tensorflow as tf\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X5aYwUvJ5DA-"},"source":["mapp=np.array([[1,2],[3,4]])\n","tf.nn.conv2d(mapp, mapp,strides=[1,1,1,1], padding='VALID')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V1vs3dEVxpe5"},"source":["import tensorflow as tf\n","\n","def _centered(arr, newshape):\n","    # Return the center newshape portion of the array.\n","    currshape = tf.shape(arr)[-2:]\n","    startind = (currshape - newshape) // 2\n","    endind = startind + newshape\n","    return arr[..., startind[0]:endind[0], startind[1]:endind[1]]\n","\n","def fftconv(in1, in2, mode=\"full\"):\n","    # Reorder channels to come second (needed for fft)\n","    in1 = tf.transpose(in1, perm=[0, 3, 1, 2])\n","    in2 = tf.transpose(in2, perm=[0, 3, 1, 2])\n","\n","    # Extract shapes\n","    s1 = tf.convert_to_tensor(tf.shape(in1)[-2:])\n","    s2 = tf.convert_to_tensor(tf.shape(in2)[-2:])\n","    shape = s1 + s2 - 1\n","\n","    # Compute convolution in fourier space\n","    sp1 = tf.spectral.rfft2d(in1, shape)\n","    sp2 = tf.spectral.rfft2d(in2, shape)\n","    ret = tf.spectral.irfft2d(sp1 * sp2, shape)\n","\n","    # Crop according to mode\n","    if mode == \"full\":\n","        cropped = ret\n","    elif mode == \"same\":\n","        cropped = _centered(ret, s1)\n","    elif mode == \"valid\":\n","        cropped = _centered(ret, s1 - s2 + 1)\n","    else:\n","        raise ValueError(\"Acceptable mode flags are 'valid',\"\n","                         \" 'same', or 'full'.\")\n","\n","    # Reorder channels to last\n","    result = tf.transpose(cropped, perm=[0, 2, 3, 1])\n","    return result"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v2SARrK0xsPh","executionInfo":{"status":"ok","timestamp":1616716364213,"user_tz":180,"elapsed":32127,"user":{"displayName":"Sol Vidal","photoUrl":"","userId":"10822241948323237248"}},"outputId":"52bfaf94-200c-4fbc-a1dc-69ca01c2f68d"},"source":["x_in = np.array([[\n","  [[2], [1], [2], [0], [1]],\n","  [[1], [3], [2], [2], [3]],\n","  [[1], [1], [3], [3], [0]],\n","  [[2], [2], [0], [1], [1]],\n","  [[0], [0], [3], [1], [2]], ]])\n","kernel_in = np.array([\n"," [ [[2, 0.1]], [[3, 0.2]] ],\n"," [ [[0, 0.3]],[[1, 0.4]] ], ])\n","x = tf.constant(x_in, dtype=tf.float32)\n","kernel = tf.constant(kernel_in, dtype=tf.float32)\n","tf.nn.conv2d(x, kernel, strides=[1, 1, 1, 1], padding='VALID')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 4, 4, 2), dtype=float32, numpy=\n","array([[[[10.       ,  1.9000001],\n","         [10.       ,  2.2      ],\n","         [ 6.       ,  1.6      ],\n","         [ 6.       ,  2.       ]],\n","\n","        [[12.       ,  1.4      ],\n","         [15.       ,  2.2      ],\n","         [13.       ,  2.7      ],\n","         [13.       ,  1.7      ]],\n","\n","        [[ 7.       ,  1.7      ],\n","         [11.       ,  1.3      ],\n","         [16.       ,  1.3000001],\n","         [ 7.       ,  1.       ]],\n","\n","        [[10.       ,  0.6      ],\n","         [ 7.       ,  1.4      ],\n","         [ 4.       ,  1.5      ],\n","         [ 7.       ,  1.4000001]]]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"SmY1m2v06Fzr"},"source":["#matmul\n","NmEC= 10\n","NI=5\n","J=np.random.rand(NmEC,NI)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"44KGulqly6jA"},"source":["\n","import numpy as np\n","a=J=np.random.rand(40,40).astype(np.float32)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EGbBLPiEyvDe"},"source":["import tensorflow as tf\n","def gautoc_fast_2D(mapp): # cambiar por otra funcion \n","    myone=tf.ones(mapp.shape)\n","    myone_i=tf.constant(tf.reshape(myone, (1, myone.shape[0],myone.shape[1] , 1)))\n","    myone_k=tf.constant(tf.reshape(myone, ( myone.shape[0],myone.shape[1] ,1, 1)))\n","    mapp_i=tf.constant(tf.reshape(mapp, (1, myone.shape[0],myone.shape[1] , 1)))\n","    mapp_k=tf.constant(tf.reshape(mapp, ( myone.shape[0],myone.shape[1] ,1, 1)))\n","    dim=myone.shape[0]-1\n","    nn=tf.nn.conv2d(myone_i, myone_k, strides=[1, 1], padding=[[0, 0], [dim,dim], [dim, dim], [0, 0]])[0, ..., 0]\n","    mx=tf.nn.conv2d(mapp_i, myone_k, strides=[1, 1], padding=[[0, 0], [dim,dim], [dim, dim], [0, 0]])[0, ..., 0]/nn\n","    my=tf.nn.conv2d(myone_i, mapp_k, strides=[1, 1], padding=[[0, 0], [dim,dim], [dim, dim], [0, 0]])[0, ..., 0]/nn\n","    auto=tf.nn.conv2d(mapp_i, mapp_k, strides=[1, 1], padding=[[0, 0], [dim,dim], [dim, dim], [0, 0]])[0, ..., 0]/nn-mx*my\n","    auto=auto/((((tf.nn.conv2d(tf.constant(tf.reshape(mapp**2, (1, myone.shape[0],myone.shape[1] , 1))), myone_k, strides=[1, 1], padding=[[0, 0], [dim,dim], [dim, dim], [0, 0]])[0, ..., 0])/nn-mx*mx)*((tf.nn.conv2d(myone_i,tf.constant(tf.reshape(mapp**2, ( myone.shape[0],myone.shape[1] , 1,1))), strides=[1, 1], padding=[[0, 0], [dim,dim], [dim, dim], [0, 0]])[0, ..., 0])/nn-my*my))**0.5)\n","    return auto"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dCu904Wp1Y3u"},"source":["\n","\n","from scipy import stats\n","from scipy import ndimage\n","import numpy as np\n","def gautoc_fast_2D(mapp):\n","    sy,sx= mapp.shape\n","    autocorrelogram=tf.Variable(tf.zeros([2*sy-1,2*sx-1]))\n","    for lx in range(-sx+1,sx):\n","        for ly in range(0,sy):\n","            mapaux1=mapp[(ly):sy,(max(0,lx)):(min(sx,sx+lx))]\n","            mapaux2=mapp[0:(sy-ly),(max(0,-lx)):(min(sx-lx,sx))]  \n","            autocorrelogram=autocorrelogram[int(sy+ly-1),int(sx+lx-1)].assign(tfp.stats.correlation(tf.reshape(mapaux1, (tf.size(mapaux1) , 1)),tf.reshape(mapaux2, (tf.size(mapaux2) , 1)))[0][0])\n","            autocorrelogram=autocorrelogram[int(sy-ly-1),int(sx-lx-1)].assign(autocorrelogram[int(sy+ly-1),int(sx+lx-1)])            \n","    return autocorrelogram"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PBmbVY1E7BKd","executionInfo":{"status":"ok","timestamp":1618580960213,"user_tz":180,"elapsed":23784,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"c288cb36-1f91-4107-994a-1b1a1ec562ed"},"source":["gautoc_fast_2D(a)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'UnreadVariable' shape=(79, 79) dtype=float32, numpy=\n","array([[        nan,  1.        , -0.36071613, ..., -0.44442037,\n","        -1.        ,         nan],\n","       [-1.0000002 , -0.7059277 , -0.16805494, ..., -0.14250582,\n","         0.69352365, -1.        ],\n","       [-0.9697075 , -0.19127883,  0.3544344 , ..., -0.03605698,\n","        -0.21193455,  0.8694553 ],\n","       ...,\n","       [ 0.8694553 , -0.21193455, -0.03605698, ...,  0.3544344 ,\n","        -0.19127883, -0.9697075 ],\n","       [-1.        ,  0.69352365, -0.14250582, ..., -0.16805494,\n","        -0.7059277 , -1.0000002 ],\n","       [        nan, -1.        , -0.44442037, ..., -0.36071613,\n","         1.        ,         nan]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2jDTM5r53EwT","executionInfo":{"status":"ok","timestamp":1618580909847,"user_tz":180,"elapsed":891,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"5415f3d1-2194-4b7a-c117-dc413afd6031"},"source":["import tensorflow_probability as tfp\n","mapaux1=mapaux1.ravel()\n","\n","mapaux2=mapaux2.ravel()\n","\n","#tfp.stats.correlation(tf.reshape(mapaux1.ravel(), (len(mapaux1) , 1)),tf.reshape(mapaux2.ravel(), (len(mapaux2) , 1)))\n","tfp.stats.correlation(tf.reshape(mapaux1, (tf.size(mapaux1) , 1)),tf.reshape(mapaux2, (tf.size(mapaux2) , 1)))[0][0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.014307815>"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M3DTb8nR5WJ-","executionInfo":{"status":"ok","timestamp":1618580246755,"user_tz":180,"elapsed":842,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"16698761-dd28-4369-f9c3-d5456fde3eca"},"source":["x = tf.random.uniform((5,2),2,3)\n","y = tf.random.uniform((5,2),2,3)\n","x"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(5, 2), dtype=float32, numpy=\n","array([[2.3783884, 2.3149014],\n","       [2.452055 , 2.5416613],\n","       [2.9163096, 2.056037 ],\n","       [2.5807376, 2.4172783],\n","       [2.0356965, 2.8188953]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MVD5uNwJ3H7w","executionInfo":{"status":"ok","timestamp":1618579873551,"user_tz":180,"elapsed":879,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"128e4271-5dc1-4f3c-8813-65c9b244b9be"},"source":["sy=40\n","sx=40\n","lx=0\n","ly=1\n","mapp=a\n","mapaux1=mapp[(ly):sy,(max(0,lx)):(min(sx,sx+lx))]\n","mapaux2=mapp[0:(sy-ly),(max(0,-lx)):(min(sx-lx,sx))] \n","np.corrcoef(mapaux1.ravel(), mapaux2.ravel())[0][1]\n","#np.correlate(mapaux1.ravel(), mapaux2.ravel())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.014307814186947442"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nZy7CxUXzAcT","executionInfo":{"status":"ok","timestamp":1618578621477,"user_tz":180,"elapsed":866,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"6cf7b48e-39f7-4cf8-ef3e-ae3cf443ae4a"},"source":["autoc_fast_2D(a)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(79, 79), dtype=float32, numpy=\n","array([[        nan,  0.9999008 , -0.36071083, ..., -0.4444187 ,\n","        -1.0000032 ,         nan],\n","       [-1.0000048 , -0.7059275 , -0.16805522, ..., -0.14250557,\n","         0.69352406, -0.9999998 ],\n","       [-0.96970785, -0.19127929,  0.35443357, ..., -0.03605664,\n","        -0.21193445,  0.8694554 ],\n","       ...,\n","       [ 0.8694554 , -0.21193445, -0.03605664, ...,  0.35443357,\n","        -0.19127929, -0.96970785],\n","       [-0.9999998 ,  0.69352406, -0.14250557, ..., -0.16805522,\n","        -0.7059275 , -1.0000048 ],\n","       [        nan, -1.0000032 , -0.4444187 , ..., -0.36071083,\n","         0.9999008 ,         nan]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"66NUwFHZzPFA","executionInfo":{"status":"ok","timestamp":1618578570393,"user_tz":180,"elapsed":1102,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"b9298de4-1768-4d26-f945-42f773b3d855"},"source":["autoc_fast_2D(a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:9: RuntimeWarning: invalid value encountered in sqrt\n","  if __name__ == '__main__':\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.        ,  1.00062655, -0.35970168, ..., -0.44416648,\n","        -0.99824398,  0.        ],\n","       [-0.99959539, -0.70581052, -0.16799752, ..., -0.14245564,\n","         0.69358079, -0.99936483],\n","       [-0.96956636, -0.19122568,  0.35446702, ..., -0.03602793,\n","        -0.21189205,  0.86992122],\n","       ...,\n","       [ 0.86910322, -0.21192319, -0.03604507, ...,  0.35444187,\n","        -0.19126006, -0.96960115],\n","       [-0.99919492,  0.69355016, -0.14249994, ..., -0.16804657,\n","        -0.70587554, -0.99957152],\n","       [ 0.        , -1.00034547, -0.44437233, ..., -0.36065789,\n","         1.01525526,  0.        ]])"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"Wgjpnvt3yxEg"},"source":["import numpy as np\n","from scipy import signal\n","def autoc_fast_2D(mapp): # cambiar por otra funcion \n","    myone=np.ones(mapp.shape)\n","    nn=signal.fftconvolve(myone, np.rot90(myone, k=2))\n","    mx=signal.fftconvolve(mapp, np.rot90(myone, k=2))/nn\n","    my=signal.fftconvolve(myone, np.rot90(mapp, k=2))/nn\n","    auto=signal.fftconvolve(mapp, np.rot90(mapp, k=2))/nn-mx*my\n","    auto=auto/(np.spacing(1)+np.sqrt((signal.fftconvolve(mapp**2, np.rot90(myone, k=2))/nn-mx*mx)*(signal.fftconvolve(myone, np.rot90(mapp**2, k=2))/nn-my*my)))\n","    auto[0][0]=0\n","    auto[0][-1]=0\n","    auto[-1][-1]=0\n","    auto[-1][0]=0\n","    return auto"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W4anVqP3z3q8","executionInfo":{"status":"ok","timestamp":1618581202263,"user_tz":180,"elapsed":998,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"331e1fa1-f1f3-48e0-841e-664ffc40c67f"},"source":["import timeit\n","\n","\n","def cpu():\n","  with tf.device('/cpu:0'):\n","    #return tf.nn.conv2d(img_tf, k_tf, strides=[1, 1], padding=[[0, 0], [39,39], [39, 39], [0, 0]])[0, ..., 0]\n","    return autoc_fast_2D(a)\n","    #return signal.correlate2d(a,a)\n","\n","def gpu():\n","  with tf.device('/device:GPU:0'):\n","    return gautoc_fast_2D(a)\n","\n","cpu()\n","gpu()\n","print('CPU (s):')\n","cpu_time = timeit.timeit('cpu()', number=10, setup=\"from __main__ import cpu\")\n","print(cpu_time)\n","print('GPU (s):')\n","gpu_time = timeit.timeit('gpu()', number=10, setup=\"from __main__ import gpu\")\n","print(gpu_time)\n","print('GPU speedup over CPU: {}x'.format(int(cpu_time/gpu_time)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU (s):\n","0.028375207999943086\n","GPU (s):\n","0.05842621100009637\n","GPU speedup over CPU: 0x\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:9: RuntimeWarning: invalid value encountered in sqrt\n","  if __name__ == '__main__':\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"P0I-IT5I9a-o","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618581243557,"user_tz":180,"elapsed":914,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"9622c5c3-46de-45f0-9637-95bceae13166"},"source":["cpu()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:9: RuntimeWarning: invalid value encountered in sqrt\n","  if __name__ == '__main__':\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.        ,  1.00062655, -0.35970168, ..., -0.44416648,\n","        -0.99824398,  0.        ],\n","       [-0.99959539, -0.70581052, -0.16799752, ..., -0.14245564,\n","         0.69358079, -0.99936483],\n","       [-0.96956636, -0.19122568,  0.35446702, ..., -0.03602793,\n","        -0.21189205,  0.86992122],\n","       ...,\n","       [ 0.86910322, -0.21192319, -0.03604507, ...,  0.35444187,\n","        -0.19126006, -0.96960115],\n","       [-0.99919492,  0.69355016, -0.14249994, ..., -0.16804657,\n","        -0.70587554, -0.99957152],\n","       [ 0.        , -1.00034547, -0.44437233, ..., -0.36065789,\n","         1.01525526,  0.        ]])"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"HLoCY5Ol9c2-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618581250402,"user_tz":180,"elapsed":840,"user":{"displayName":"Maria Sol Vidal","photoUrl":"","userId":"17166637752659222451"}},"outputId":"997d75d4-6df7-4623-c8af-c6a834aa8a62"},"source":["gpu()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(79, 79), dtype=float32, numpy=\n","array([[        nan,  0.9999008 , -0.36071083, ..., -0.4444187 ,\n","        -1.0000032 ,         nan],\n","       [-1.0000048 , -0.7059275 , -0.16805522, ..., -0.14250557,\n","         0.69352406, -0.9999998 ],\n","       [-0.96970785, -0.19127929,  0.35443357, ..., -0.03605664,\n","        -0.21193445,  0.8694554 ],\n","       ...,\n","       [ 0.8694554 , -0.21193445, -0.03605664, ...,  0.35443357,\n","        -0.19127929, -0.96970785],\n","       [-0.9999998 ,  0.69352406, -0.14250557, ..., -0.16805522,\n","        -0.7059275 , -1.0000048 ],\n","       [        nan, -1.0000032 , -0.4444187 , ..., -0.36071083,\n","         0.9999008 ,         nan]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":48}]}]}